creacion de un archivo appConfig en el proyecto en la capa presentaicon para ahorrarme tener que escribir la cadena de conexion en la capa de datos siempre

appConfig:archivo de configuración de la aplicación (archivo app.config) a un proyecto de C#, puede personalizar el modo en que Common Language Runtime busca y carga archivos de ensamblado.

dentro de este archivos definimos lo siguiente
La etiqueta <connectionStrings> en un archivo de configuración de una aplicación .NET (como el archivo app.config o web.config) se utiliza 
para definir las cadenas de conexión a bases de datos u otros servicios de datos que la aplicación necesita. 

<connectionStrings>: Esta es la etiqueta principal que encapsula todas las definiciones de cadenas de conexión en el archivo de configuración.
<add>: Esta etiqueta se utiliza para definir una cadena de conexión específica. Dentro de la etiqueta <add>, puedes proporcionar varios atributos que describen la conexión. Los atributos comunes incluyen:
name: Es un nombre descriptivo que le das a la cadena de conexión para que puedas hacer referencia a ella desde el código de tu aplicación.
connectionString: Aquí se especifica la cadena de conexión real que contiene la información necesaria para conectarse a la base de datos o servicio de datos. Esto incluye detalles como el servidor, la autenticación, la base de datos, etc.
providerName (opcional): Indica el proveedor de datos que se utilizará para conectarse a la base de datos. En este caso, se utiliza "System.Data.SqlClient" para indicar que se usará el proveedor de datos de SQL Server.
<connectionStrings>
    <add name="cadena_conexion" 
         connectionString="Data Source=Servidor;Initial Catalog=BaseDeDatos;User Id=Usuario;Password=Contraseña;"
         providerName="System.Data.SqlClient" />
</connectionStrings>

En el código de tu aplicación, puedes acceder a esta cadena de conexión utilizando el nombre que le has dado en el atributo name. Por ejemplo, en C# podrías hacer algo como esto:
string connectionString = ConfigurationManager.ConnectionStrings["cadena_conexion"].ConnectionString;

Esto te permitirá utilizar la cadena de conexión en tu código para conectarte a la base de datos. La ventaja de definir las cadenas de conexión en el archivo de configuración es que puedes cambiarlas fácilmente sin tener que modificar el código fuente de tu aplicación.
Una cadena de conexión, también conocida como cadena de conexión a la base de datos o cadena de conexión de datos, es una cadena de texto que contiene información necesaria para que una aplicación se conecte a una base de datos o a otro sistema de almacenamiento de datos. Esta información incluye detalles sobre la ubicación del servidor de base de datos, la autenticación, la base de datos a la que se accederá y otros parámetros de configuración relevantes.

al definir una cadena de conexión en un archivo de configuración de la aplicación, como mencioné anteriormente, puedes evitar tener que codificar la cadena de conexión directamente en tu capa de datos.
En su lugar, puedes recuperar la cadena de conexión desde el archivo de configuración, lo que hace que tu aplicación sea más flexible y mantenible.
-------Entonces, en tu capa de datos, puedes recuperar esta cadena de conexión---------
ej: private SqlConnection Conexion = new SqlConnection(ConfigurationManager.ConnectionStrings["cadena_conexion"].ConnectionString);


--------------------
yo estoy usando el metodo listar para verificar tal vez me convenga crear un metodo login para no estar trayendo todo y verificarlo en el sql solamente
la dif con el metodo de  mauro es la forma de acceder a los datos y que el uso mdistintos nobre

------------------
para cargar los combobox o las lista tengo dos formas :
Usar el "String Collection Editor":

Ventaja: Es más visual y permite editar la lista de elementos en tiempo de diseño sin necesidad de escribir código.
Desventaja: Si la lista de perfiles cambia con el tiempo o proviene de una fuente de datos externa, deberás actualizarla manualmente en el diseñador.
Este enfoque es adecuado cuando tienes una lista fija de elementos que rara vez cambia y que puedes definir fácilmente en tiempo de diseño.

Cargar la lista manualmente en el código:

Ventaja: Mayor flexibilidad si necesitas cargar dinámicamente los elementos desde una fuente de datos (por ejemplo, desde una base de datos) o si la lista puede cambiar en tiempo de ejecución.
Desventaja: Requiere escribir código adicional y no es tan visual como el "String Collection Editor".